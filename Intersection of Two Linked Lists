# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:

        # time: O(n+m) space: O(1)
        l1, l2 =headA,headB

        while l1 != l2:
            l1 = l1.next if l1 else headB
            l2 = l2.next if l2 else headA
        
        return l1


        # time: O(m+n), Space: O(n)
        
        # first_set={}
        # curr=headA
        # i=0
        # while curr:
        #     first_set[curr] = i
        #     curr=curr.next
        #     i+=1
        # print(first_set)
        # curr = headB
        # while curr:
        #     if curr in first_set:
        #         return curr
        #     curr=curr.next

        # return None
